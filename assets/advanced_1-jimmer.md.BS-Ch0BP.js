import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.DuIra3uW.js";const c=JSON.parse('{"title":"Jimmer","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/1-jimmer.md","filePath":"advanced/1-jimmer.md","lastUpdated":1730179243000}'),l={name:"advanced/1-jimmer.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="jimmer" tabindex="-1">Jimmer <a class="header-anchor" href="#jimmer" aria-label="Permalink to &quot;Jimmer&quot;">​</a></h1><h2 id="一、为什么切换到-jimmer" tabindex="-1">一、为什么切换到 <a href="https://babyfish-ct.github.io/jimmer-doc" target="_blank" rel="noreferrer">Jimmer</a>？ <a class="header-anchor" href="#一、为什么切换到-jimmer" aria-label="Permalink to &quot;一、为什么切换到 [Jimmer](https://babyfish-ct.github.io/jimmer-doc)？&quot;">​</a></h2><p>higher faster stronger</p><p>深切认同 Jimmer 作者的话，ORM 的选择是最基础的，对于后续使用体验和维护是致命的。后端主要就是从数据库拉数据给前端，然后为了自身服务不拉闸，再搞出一大堆中间件去提升服务的高可用，就是这样。</p><h2 id="二、简单扫盲" tabindex="-1">二、简单扫盲 <a class="header-anchor" href="#二、简单扫盲" aria-label="Permalink to &quot;二、简单扫盲&quot;">​</a></h2><p>使用 Jimmer 后，repository 基本没有存在的必要。因此本项目不做保留。Jimmer 暴露的 *SqlClient 可以除接触当作一个 sql 工具类，然后在代码中调用对应的 API。不要有太大的心里负担。</p><h3 id="注解" tabindex="-1">注解 <a class="header-anchor" href="#注解" aria-label="Permalink to &quot;注解&quot;">​</a></h3><p>大部分和 JPA 一样或类似，也有很多独家注解。</p><h4 id="key" tabindex="-1">@Key <a class="header-anchor" href="#key" aria-label="Permalink to &quot;@Key&quot;">​</a></h4><p>类似联合索引，被 <code>@Key</code> 修饰的字段在调用 save API 时如果数据库已经存在，那么不会新增，而是会修改。</p><h4 id="enableimplicitapi、-fetchby、-defaultfetcherowner、-api、-apiignore" tabindex="-1">@EnableImplicitApi、@FetchBy、@DefaultFetcherOwner、@Api、@ApiIgnore <a class="header-anchor" href="#enableimplicitapi、-fetchby、-defaultfetcherowner、-api、-apiignore" aria-label="Permalink to &quot;@EnableImplicitApi、@FetchBy、@DefaultFetcherOwner、@Api、@ApiIgnore&quot;">​</a></h4><p>启动客户端能力的注解，自动为前端生成结构化代码。目前只支持 Spring。</p><ul><li><strong>@EnableImplicitApi</strong>：启用客户端能力，使用此注解才会生效</li><li><strong>@FetchBy</strong>：声明抓取的自定义 Fetcher 形状，该形状默认需要在当前类中，若不在当前类，需要指明 <code>ownerType</code> 属性</li><li><strong>@DefaultFetcherOwner</strong>：条件如上，若定义的 Fetcher 形状不在当前类中，并且该类使用的 Fetcher 形状都归于另一个类，可以在类上面使用此注解为当前类全部指定</li><li><strong>@Api、@ApiIgnore</strong>：这就很简单了，控制接口的分组和是否显示在接口文档中</li></ul><p>示例：</p><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fetchers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 定义自己需要的一个查询形状</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STUDENT_FETCHER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newFetcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Student::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            fullName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            gender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            courseIds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                courseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/student&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果此处不使用该注解，下面的 @FetchBy(ownerType = class) 必须指明 STUDENT_FETCHER 在哪个类中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果该类中的多个接口查询的 Fetcher 在一个类中，使用该注解非常方便</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @DefaultFetcherOwner(Fetchers::class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StudentController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> studentService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StudentService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAllStudentFetchBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageIndex: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageSize: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@FetchBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;STUDENT_FETCHER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ownerType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Fetcher::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) Student</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> studentService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllStudentFetchBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pageIndex, pageSize)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="idview" tabindex="-1">@IdView <a class="header-anchor" href="#idview" aria-label="Permalink to &quot;@IdView&quot;">​</a></h4><p>查询非表中数据字段集合，与实体无关。</p>`,18)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
